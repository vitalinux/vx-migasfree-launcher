#!/usr/bin/python
# -*- coding: utf-8 -*-

import gtk
import sys, os, threading, locale
import gobject
import subprocess
import webbrowser
import appindicator
import optparse

from migasfree_client.utils import get_config, get_hardware_uuid, get_mfc_computer_name

gobject.threads_init()
gtk.gdk.threads_init()

encoding = locale.getpreferredencoding()
utf8conv = lambda x : unicode(x, encoding).encode('utf8')

FIRST_RUN="/var/tmp/migasfree/first-tags.conf"
CMD_UPGRADE = "sudo migasfree-launcher"
CMD_FORCE_UPGRADE = "sudo migasfree --update --force-upgrade"
CMD_LABEL = "migasfree-label"
CMD_APPS = "migasfree-apps"

SCHEMA = "org.migasfree.tray"
SHOW_CONSOLE = "show-console"


def on_button_clicked( button, win):
    win.hide()

def run():
    if not sia.is_upgrading:
        if options.force_upgrade:
            sia.force_upgrade(None)
        else:
            sia.upgrade(None)

class Timer():
    timer=None
    def __init__(self, interval):
        self.interval=interval*3600 # hours

    def start(self):
        run()
        self.timer=threading.Timer(self.interval, self.start)
        self.timer.start()

    def cancel(self):
        self.timer.cancel()

class Console(gtk.Window):
    textview=gtk.TextView()
    textbuffer = textview.get_buffer()
    progress = gtk.ProgressBar()
    def __init__(self):
        gtk.Window.__init__(self)
        sw = gtk.ScrolledWindow()
        sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
        self.textview.set_editable(False)
        sw.add(self.textview)
        self.set_title('migasfree console')
        self.set_icon_name('migasfree')
        self.resize(600,400)
        self.set_property('deletable', False)
        self.set_decorated(True)
        self.set_border_width(10)
        button = gtk.Button(u"Ocultar")
        button.connect("clicked", on_button_clicked, self)
        vbox = gtk.VBox(spacing=6)
        vbox.pack_start(sw)

        vboxprogress = gtk.VBox(False, 0)
        vboxprogress.pack_start(self.progress, False, True, 0)
        self.progress.set_pulse_step(0.02)
        vbox.pack_start(vboxprogress, False, True, 0)

        vbox.pack_start(button, False)
        self.add(vbox)

    def on_timeout(self, user_data):
        self.progress.pulse()
        return True

class SystrayIconApp:
    tray = None
    menu = None
    menu_force_upgrade = None
    menu_console = None
    is_upgrading =False
    mode_console = False

    def __init__(self):
        self.tray = appindicator.Indicator('migasfree-1','migasfree-2',appindicator.CATEGORY_APPLICATION_STATUS)
        self.tray.set_status(appindicator.STATUS_ACTIVE)
        self.tray.set_attention_icon('attention_icon')
        self.tray.set_icon('migasfree')
        self.mode_console = self.get_console()
        self.make_menu()
        

    def make_menu(self):
        self.menu = gtk.Menu()

        apps = gtk.ImageMenuItem("Applications")
        apps.set_image(self.get_image("migasfree-apps"))
        apps.set_sensitive( False ) # TODO ""migasfree-apps""
        apps.show()
        self.menu.append(apps)
        apps.connect('activate', self.show_apps)

        self.menu.append(gtk.SeparatorMenuItem())

        self.menu_force_upgrade = gtk.ImageMenuItem("Force upgrade")
        self.menu_force_upgrade.set_image(self.get_image("migasfree-force-upgrade"))

        self.menu_force_upgrade.set_sensitive( not self.is_upgrading )
        self.menu_force_upgrade.show()
        self.menu.append(self.menu_force_upgrade)
        self.menu_force_upgrade.connect('activate', self.force_upgrade)

        self.menu.append(gtk.SeparatorMenuItem())

        self.menu_console= gtk.ImageMenuItem("Console")
        self.menu_console.set_image(self.get_image("migasfree-console"))
        self.menu_console.show()
        self.menu_console.connect('activate',self.show_console)
        self.menu.append(self.menu_console)

        menu_mode_console = gtk.CheckMenuItem("Show always")
        menu_mode_console.set_active( self.mode_console )
        menu_mode_console.connect("activate", self.on_show_console)
        self.menu.append(menu_mode_console)

        self.menu.append(gtk.SeparatorMenuItem())

        labelid = gtk.ImageMenuItem("Identification label")
        labelid.set_image(self.get_image("migasfree-label"))
        labelid.show()
        self.menu.append(labelid)
        labelid.connect('activate', self.show_labelid)

        if options.support:
            support = gtk.ImageMenuItem("Support")
            support.set_image(self.get_image("migasfree-support"))
            support.show()
            self.menu.append(support)
            support.connect('activate', self.show_support)

        self.menu.append(gtk.SeparatorMenuItem())

        about = gtk.MenuItem("About")
        about.show()
        self.menu.append(about)
        about.connect('activate', self.show_about)

        self.menu.show_all()
        self.tray.set_menu(self.menu)

    def set_console(self,value):
        if value:
            x="true"
        else:
            x="false"
        os.system("gsettings set org.migasfree.console show-console %s" % x)	
	
    def get_console(self):
        proc = subprocess.Popen(["gsettings", "get", "org.migasfree.console", "show-console"], stdout=subprocess.PIPE, shell=False)
        (out, err) = proc.communicate()
        return out.startswith("true")

    def on_show_console(self, widget):
        self.set_console(widget.get_active())
        self.mode_console = widget.get_active()

    def get_image(self, name):
        img=gtk.Image()
        img.set_from_icon_name(name, gtk.ICON_SIZE_MENU)
        return img		

    def show_console(self, x):
        if console.get_property("visible"):
            console.hide()
        else:
            console.show_all()

    def show_labelid(self, widget):
        os.system(CMD_LABEL)

    def show_apps(self, widget):
        os.system(CMD_APPS)

    def show_support(self, widget):
        webbrowser.open(options.support)

    def  show_about(self, widget):
        about_dialog = gtk.AboutDialog()
        about_dialog.set_destroy_with_parent (True)
        about_dialog.set_icon_name ("migasfree-upgrade")
        about_dialog.set_name('migasfree-tray')
        about_dialog.set_version(_version)
        about_dialog.set_copyright("(C) 2010-2014 migasfree team")
        about_dialog.set_comments(("Tray for migasfree"))
        about_dialog.set_authors(['Alberto Gacías','Jose Antonio Chavarría'])
        about_dialog.set_website("http://migasfree.org/")
        about_dialog.set_website_label("migasfree.org")
        about_dialog.run()
        about_dialog.destroy()

    def upgrade(self, widget):
        self.run(CMD_UPGRADE)

    def force_upgrade(self, widget):
        self.run(CMD_FORCE_UPGRADE)

    def show_tags(self, widget):
        self.run(CMD_TAGS)

    def run(self, command):
        if self.mode_console :
            console.show_all()
            
        thr = threading.Thread(target= self.read_output, args=(console.textview, console.textbuffer, command))
        console.textbuffer.set_text("")
        thr.start()

    def read_output(self, view, buffer, command):
        self.is_upgrading = True
        self.make_menu()
        console.timeout_id = gobject.timeout_add(50, console.on_timeout, None)

        self.tray.set_icon('migasfree-upgrade')

        s = subprocess.Popen(command.split(" "),stdout=subprocess.PIPE,stderr=subprocess.STDOUT)

        while s.returncode == None:
            try:
              line = s.stdout.readline()
            except:
              pass
 	
            if not line and s.poll()  != None:
                break
            line=line.replace("\033[92m","")
            line=line.replace("\033[91m","")
            line=line.replace("\033[32m","")
            line=line.replace("\033[0m","")

            gtk.gdk.threads_enter()
            iter = buffer.get_end_iter()
            buffer.place_cursor(iter)
            buffer.insert(iter, utf8conv(line))
            view.scroll_to_mark(buffer.get_insert(), 0.1)
            gtk.gdk.threads_leave()

        self.tray.set_icon('migasfree')
        self.is_upgrading = False
        self.make_menu()
        console.progress.set_fraction(0)
        gobject.source_remove( console.timeout_id )

if __name__ == "__main__":

    _program="migasfree-tray"
    _version= "1.0"

    parser = optparse.OptionParser(
    description=_program,
    prog=_program,
    version=_version,
    usage='%prog options'
    )

    parser.add_option("--force-upgrade", "-a", action="store_true",
        help=_('Force Upgrade'),default=False)
    parser.add_option("--interval","-i", type="int", dest="interval",default=24) # default 24 hours
    parser.add_option("--support","-s", action="store", dest="support",default="")

    options, arguments = parser.parse_args()

    console=Console()

    if os.path.isfile(FIRST_RUN):
        console.show_all()

    sia = SystrayIconApp()


    x=Timer(options.interval)
    x.start()

    gtk.main()
